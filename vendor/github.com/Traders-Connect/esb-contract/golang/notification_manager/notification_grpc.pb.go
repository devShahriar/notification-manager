// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notification_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationManagerClient is the client API for NotificationManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationManagerClient interface {
	GetIntegrationStatus(ctx context.Context, in *IntegrationStatusReq, opts ...grpc.CallOption) (*IntegrationStatusReply, error)
	InstallIntegration(ctx context.Context, in *InstallIntegrationReq, opts ...grpc.CallOption) (*InstallIntegrationReply, error)
	AddConfig(ctx context.Context, in *NotificationConfig, opts ...grpc.CallOption) (*AddConfigReply, error)
	EditConfig(ctx context.Context, in *EditConfigReq, opts ...grpc.CallOption) (*EditConfigReply, error)
	GetConfig(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*UserConfigResp, error)
	GetConfigDetails(ctx context.Context, in *ConfigDetailsReq, opts ...grpc.CallOption) (*ConfigDetailsReply, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigReq, opts ...grpc.CallOption) (*DeleteConfigReply, error)
	EditAccountMeta(ctx context.Context, in *AccountMetaReq, opts ...grpc.CallOption) (*EditAccountMetaReply, error)
	EditConfigStatus(ctx context.Context, in *EditConfigStatusReq, opts ...grpc.CallOption) (*EditConfigStatusReply, error)
	// Bot
	AddBot(ctx context.Context, in *AddBotReq, opts ...grpc.CallOption) (*AddBotReply, error)
	EditBot(ctx context.Context, in *EditBotReq, opts ...grpc.CallOption) (*EditBotReply, error)
	GetBots(ctx context.Context, in *GetBotsReq, opts ...grpc.CallOption) (*GetBotsReply, error)
	EditBotStatus(ctx context.Context, in *EditBotStatusReq, opts ...grpc.CallOption) (*EditBotStatusReply, error)
	DeleteBots(ctx context.Context, in *DeleteBotReq, opts ...grpc.CallOption) (*DeleteBotReply, error)
	// Channel
	AddChannel(ctx context.Context, in *AddChannelReq, opts ...grpc.CallOption) (*AddChannelReply, error)
	EditChannel(ctx context.Context, in *EditChannelReq, opts ...grpc.CallOption) (*EditChannelReply, error)
	GetChannel(ctx context.Context, in *GetChannelReq, opts ...grpc.CallOption) (*GetChannelReply, error)
	EditChannelStatus(ctx context.Context, in *EditChannelStatusReq, opts ...grpc.CallOption) (*EditChannelStatusReply, error)
	DeleteChannel(ctx context.Context, in *DeleteChannelReq, opts ...grpc.CallOption) (*DeleteChannelReply, error)
	// BotNotification Config
	GetBotEventConfigs(ctx context.Context, in *GetBotEventConfigsReq, opts ...grpc.CallOption) (*GetBotEventConfigsReply, error)
	GetBotEventDetails(ctx context.Context, in *GetBotEventDetailsReq, opts ...grpc.CallOption) (*GetBotEventDetailsReply, error)
	EditBotEventDetails(ctx context.Context, in *EditBotEventDetailsReq, opts ...grpc.CallOption) (*EditBotEventDetailsReply, error)
	EditBotEventStatus(ctx context.Context, in *EditBotEventStatusReq, opts ...grpc.CallOption) (*EditBotEventStatusReply, error)
	UninstallIntegration(ctx context.Context, in *UninstallIntegrationReq, opts ...grpc.CallOption) (*UninstallIntegrationReply, error)
}

type notificationManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationManagerClient(cc grpc.ClientConnInterface) NotificationManagerClient {
	return &notificationManagerClient{cc}
}

func (c *notificationManagerClient) GetIntegrationStatus(ctx context.Context, in *IntegrationStatusReq, opts ...grpc.CallOption) (*IntegrationStatusReply, error) {
	out := new(IntegrationStatusReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/GetIntegrationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) InstallIntegration(ctx context.Context, in *InstallIntegrationReq, opts ...grpc.CallOption) (*InstallIntegrationReply, error) {
	out := new(InstallIntegrationReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/InstallIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) AddConfig(ctx context.Context, in *NotificationConfig, opts ...grpc.CallOption) (*AddConfigReply, error) {
	out := new(AddConfigReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/AddConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) EditConfig(ctx context.Context, in *EditConfigReq, opts ...grpc.CallOption) (*EditConfigReply, error) {
	out := new(EditConfigReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/EditConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetConfig(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*UserConfigResp, error) {
	out := new(UserConfigResp)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetConfigDetails(ctx context.Context, in *ConfigDetailsReq, opts ...grpc.CallOption) (*ConfigDetailsReply, error) {
	out := new(ConfigDetailsReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/GetConfigDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) DeleteConfig(ctx context.Context, in *DeleteConfigReq, opts ...grpc.CallOption) (*DeleteConfigReply, error) {
	out := new(DeleteConfigReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) EditAccountMeta(ctx context.Context, in *AccountMetaReq, opts ...grpc.CallOption) (*EditAccountMetaReply, error) {
	out := new(EditAccountMetaReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/EditAccountMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) EditConfigStatus(ctx context.Context, in *EditConfigStatusReq, opts ...grpc.CallOption) (*EditConfigStatusReply, error) {
	out := new(EditConfigStatusReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/EditConfigStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) AddBot(ctx context.Context, in *AddBotReq, opts ...grpc.CallOption) (*AddBotReply, error) {
	out := new(AddBotReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/AddBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) EditBot(ctx context.Context, in *EditBotReq, opts ...grpc.CallOption) (*EditBotReply, error) {
	out := new(EditBotReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/EditBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetBots(ctx context.Context, in *GetBotsReq, opts ...grpc.CallOption) (*GetBotsReply, error) {
	out := new(GetBotsReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/GetBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) EditBotStatus(ctx context.Context, in *EditBotStatusReq, opts ...grpc.CallOption) (*EditBotStatusReply, error) {
	out := new(EditBotStatusReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/EditBotStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) DeleteBots(ctx context.Context, in *DeleteBotReq, opts ...grpc.CallOption) (*DeleteBotReply, error) {
	out := new(DeleteBotReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/DeleteBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) AddChannel(ctx context.Context, in *AddChannelReq, opts ...grpc.CallOption) (*AddChannelReply, error) {
	out := new(AddChannelReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/AddChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) EditChannel(ctx context.Context, in *EditChannelReq, opts ...grpc.CallOption) (*EditChannelReply, error) {
	out := new(EditChannelReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/EditChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetChannel(ctx context.Context, in *GetChannelReq, opts ...grpc.CallOption) (*GetChannelReply, error) {
	out := new(GetChannelReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) EditChannelStatus(ctx context.Context, in *EditChannelStatusReq, opts ...grpc.CallOption) (*EditChannelStatusReply, error) {
	out := new(EditChannelStatusReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/EditChannelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) DeleteChannel(ctx context.Context, in *DeleteChannelReq, opts ...grpc.CallOption) (*DeleteChannelReply, error) {
	out := new(DeleteChannelReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetBotEventConfigs(ctx context.Context, in *GetBotEventConfigsReq, opts ...grpc.CallOption) (*GetBotEventConfigsReply, error) {
	out := new(GetBotEventConfigsReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/GetBotEventConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) GetBotEventDetails(ctx context.Context, in *GetBotEventDetailsReq, opts ...grpc.CallOption) (*GetBotEventDetailsReply, error) {
	out := new(GetBotEventDetailsReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/GetBotEventDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) EditBotEventDetails(ctx context.Context, in *EditBotEventDetailsReq, opts ...grpc.CallOption) (*EditBotEventDetailsReply, error) {
	out := new(EditBotEventDetailsReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/EditBotEventDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) EditBotEventStatus(ctx context.Context, in *EditBotEventStatusReq, opts ...grpc.CallOption) (*EditBotEventStatusReply, error) {
	out := new(EditBotEventStatusReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/EditBotEventStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationManagerClient) UninstallIntegration(ctx context.Context, in *UninstallIntegrationReq, opts ...grpc.CallOption) (*UninstallIntegrationReply, error) {
	out := new(UninstallIntegrationReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.NotificationManager/UninstallIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationManagerServer is the server API for NotificationManager service.
// All implementations must embed UnimplementedNotificationManagerServer
// for forward compatibility
type NotificationManagerServer interface {
	GetIntegrationStatus(context.Context, *IntegrationStatusReq) (*IntegrationStatusReply, error)
	InstallIntegration(context.Context, *InstallIntegrationReq) (*InstallIntegrationReply, error)
	AddConfig(context.Context, *NotificationConfig) (*AddConfigReply, error)
	EditConfig(context.Context, *EditConfigReq) (*EditConfigReply, error)
	GetConfig(context.Context, *ConfigReq) (*UserConfigResp, error)
	GetConfigDetails(context.Context, *ConfigDetailsReq) (*ConfigDetailsReply, error)
	DeleteConfig(context.Context, *DeleteConfigReq) (*DeleteConfigReply, error)
	EditAccountMeta(context.Context, *AccountMetaReq) (*EditAccountMetaReply, error)
	EditConfigStatus(context.Context, *EditConfigStatusReq) (*EditConfigStatusReply, error)
	// Bot
	AddBot(context.Context, *AddBotReq) (*AddBotReply, error)
	EditBot(context.Context, *EditBotReq) (*EditBotReply, error)
	GetBots(context.Context, *GetBotsReq) (*GetBotsReply, error)
	EditBotStatus(context.Context, *EditBotStatusReq) (*EditBotStatusReply, error)
	DeleteBots(context.Context, *DeleteBotReq) (*DeleteBotReply, error)
	// Channel
	AddChannel(context.Context, *AddChannelReq) (*AddChannelReply, error)
	EditChannel(context.Context, *EditChannelReq) (*EditChannelReply, error)
	GetChannel(context.Context, *GetChannelReq) (*GetChannelReply, error)
	EditChannelStatus(context.Context, *EditChannelStatusReq) (*EditChannelStatusReply, error)
	DeleteChannel(context.Context, *DeleteChannelReq) (*DeleteChannelReply, error)
	// BotNotification Config
	GetBotEventConfigs(context.Context, *GetBotEventConfigsReq) (*GetBotEventConfigsReply, error)
	GetBotEventDetails(context.Context, *GetBotEventDetailsReq) (*GetBotEventDetailsReply, error)
	EditBotEventDetails(context.Context, *EditBotEventDetailsReq) (*EditBotEventDetailsReply, error)
	EditBotEventStatus(context.Context, *EditBotEventStatusReq) (*EditBotEventStatusReply, error)
	UninstallIntegration(context.Context, *UninstallIntegrationReq) (*UninstallIntegrationReply, error)
	mustEmbedUnimplementedNotificationManagerServer()
}

// UnimplementedNotificationManagerServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationManagerServer struct {
}

func (UnimplementedNotificationManagerServer) GetIntegrationStatus(context.Context, *IntegrationStatusReq) (*IntegrationStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationStatus not implemented")
}
func (UnimplementedNotificationManagerServer) InstallIntegration(context.Context, *InstallIntegrationReq) (*InstallIntegrationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallIntegration not implemented")
}
func (UnimplementedNotificationManagerServer) AddConfig(context.Context, *NotificationConfig) (*AddConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfig not implemented")
}
func (UnimplementedNotificationManagerServer) EditConfig(context.Context, *EditConfigReq) (*EditConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditConfig not implemented")
}
func (UnimplementedNotificationManagerServer) GetConfig(context.Context, *ConfigReq) (*UserConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedNotificationManagerServer) GetConfigDetails(context.Context, *ConfigDetailsReq) (*ConfigDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigDetails not implemented")
}
func (UnimplementedNotificationManagerServer) DeleteConfig(context.Context, *DeleteConfigReq) (*DeleteConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedNotificationManagerServer) EditAccountMeta(context.Context, *AccountMetaReq) (*EditAccountMetaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAccountMeta not implemented")
}
func (UnimplementedNotificationManagerServer) EditConfigStatus(context.Context, *EditConfigStatusReq) (*EditConfigStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditConfigStatus not implemented")
}
func (UnimplementedNotificationManagerServer) AddBot(context.Context, *AddBotReq) (*AddBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBot not implemented")
}
func (UnimplementedNotificationManagerServer) EditBot(context.Context, *EditBotReq) (*EditBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBot not implemented")
}
func (UnimplementedNotificationManagerServer) GetBots(context.Context, *GetBotsReq) (*GetBotsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBots not implemented")
}
func (UnimplementedNotificationManagerServer) EditBotStatus(context.Context, *EditBotStatusReq) (*EditBotStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBotStatus not implemented")
}
func (UnimplementedNotificationManagerServer) DeleteBots(context.Context, *DeleteBotReq) (*DeleteBotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBots not implemented")
}
func (UnimplementedNotificationManagerServer) AddChannel(context.Context, *AddChannelReq) (*AddChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChannel not implemented")
}
func (UnimplementedNotificationManagerServer) EditChannel(context.Context, *EditChannelReq) (*EditChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannel not implemented")
}
func (UnimplementedNotificationManagerServer) GetChannel(context.Context, *GetChannelReq) (*GetChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedNotificationManagerServer) EditChannelStatus(context.Context, *EditChannelStatusReq) (*EditChannelStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelStatus not implemented")
}
func (UnimplementedNotificationManagerServer) DeleteChannel(context.Context, *DeleteChannelReq) (*DeleteChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedNotificationManagerServer) GetBotEventConfigs(context.Context, *GetBotEventConfigsReq) (*GetBotEventConfigsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotEventConfigs not implemented")
}
func (UnimplementedNotificationManagerServer) GetBotEventDetails(context.Context, *GetBotEventDetailsReq) (*GetBotEventDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotEventDetails not implemented")
}
func (UnimplementedNotificationManagerServer) EditBotEventDetails(context.Context, *EditBotEventDetailsReq) (*EditBotEventDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBotEventDetails not implemented")
}
func (UnimplementedNotificationManagerServer) EditBotEventStatus(context.Context, *EditBotEventStatusReq) (*EditBotEventStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBotEventStatus not implemented")
}
func (UnimplementedNotificationManagerServer) UninstallIntegration(context.Context, *UninstallIntegrationReq) (*UninstallIntegrationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallIntegration not implemented")
}
func (UnimplementedNotificationManagerServer) mustEmbedUnimplementedNotificationManagerServer() {}

// UnsafeNotificationManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationManagerServer will
// result in compilation errors.
type UnsafeNotificationManagerServer interface {
	mustEmbedUnimplementedNotificationManagerServer()
}

func RegisterNotificationManagerServer(s grpc.ServiceRegistrar, srv NotificationManagerServer) {
	s.RegisterService(&NotificationManager_ServiceDesc, srv)
}

func _NotificationManager_GetIntegrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetIntegrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/GetIntegrationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetIntegrationStatus(ctx, req.(*IntegrationStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_InstallIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).InstallIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/InstallIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).InstallIntegration(ctx, req.(*InstallIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_AddConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).AddConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/AddConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).AddConfig(ctx, req.(*NotificationConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_EditConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).EditConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/EditConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).EditConfig(ctx, req.(*EditConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetConfig(ctx, req.(*ConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetConfigDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetConfigDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/GetConfigDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetConfigDetails(ctx, req.(*ConfigDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).DeleteConfig(ctx, req.(*DeleteConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_EditAccountMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMetaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).EditAccountMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/EditAccountMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).EditAccountMeta(ctx, req.(*AccountMetaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_EditConfigStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditConfigStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).EditConfigStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/EditConfigStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).EditConfigStatus(ctx, req.(*EditConfigStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_AddBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).AddBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/AddBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).AddBot(ctx, req.(*AddBotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_EditBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditBotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).EditBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/EditBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).EditBot(ctx, req.(*EditBotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/GetBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetBots(ctx, req.(*GetBotsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_EditBotStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditBotStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).EditBotStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/EditBotStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).EditBotStatus(ctx, req.(*EditBotStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_DeleteBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).DeleteBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/DeleteBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).DeleteBots(ctx, req.(*DeleteBotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_AddChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).AddChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/AddChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).AddChannel(ctx, req.(*AddChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_EditChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).EditChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/EditChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).EditChannel(ctx, req.(*EditChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetChannel(ctx, req.(*GetChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_EditChannelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChannelStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).EditChannelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/EditChannelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).EditChannelStatus(ctx, req.(*EditChannelStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).DeleteChannel(ctx, req.(*DeleteChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetBotEventConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotEventConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetBotEventConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/GetBotEventConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetBotEventConfigs(ctx, req.(*GetBotEventConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_GetBotEventDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotEventDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).GetBotEventDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/GetBotEventDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).GetBotEventDetails(ctx, req.(*GetBotEventDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_EditBotEventDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditBotEventDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).EditBotEventDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/EditBotEventDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).EditBotEventDetails(ctx, req.(*EditBotEventDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_EditBotEventStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditBotEventStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).EditBotEventStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/EditBotEventStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).EditBotEventStatus(ctx, req.(*EditBotEventStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationManager_UninstallIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallIntegrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationManagerServer).UninstallIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.NotificationManager/UninstallIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationManagerServer).UninstallIntegration(ctx, req.(*UninstallIntegrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationManager_ServiceDesc is the grpc.ServiceDesc for NotificationManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notificationmanager.NotificationManager",
	HandlerType: (*NotificationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIntegrationStatus",
			Handler:    _NotificationManager_GetIntegrationStatus_Handler,
		},
		{
			MethodName: "InstallIntegration",
			Handler:    _NotificationManager_InstallIntegration_Handler,
		},
		{
			MethodName: "AddConfig",
			Handler:    _NotificationManager_AddConfig_Handler,
		},
		{
			MethodName: "EditConfig",
			Handler:    _NotificationManager_EditConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _NotificationManager_GetConfig_Handler,
		},
		{
			MethodName: "GetConfigDetails",
			Handler:    _NotificationManager_GetConfigDetails_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _NotificationManager_DeleteConfig_Handler,
		},
		{
			MethodName: "EditAccountMeta",
			Handler:    _NotificationManager_EditAccountMeta_Handler,
		},
		{
			MethodName: "EditConfigStatus",
			Handler:    _NotificationManager_EditConfigStatus_Handler,
		},
		{
			MethodName: "AddBot",
			Handler:    _NotificationManager_AddBot_Handler,
		},
		{
			MethodName: "EditBot",
			Handler:    _NotificationManager_EditBot_Handler,
		},
		{
			MethodName: "GetBots",
			Handler:    _NotificationManager_GetBots_Handler,
		},
		{
			MethodName: "EditBotStatus",
			Handler:    _NotificationManager_EditBotStatus_Handler,
		},
		{
			MethodName: "DeleteBots",
			Handler:    _NotificationManager_DeleteBots_Handler,
		},
		{
			MethodName: "AddChannel",
			Handler:    _NotificationManager_AddChannel_Handler,
		},
		{
			MethodName: "EditChannel",
			Handler:    _NotificationManager_EditChannel_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _NotificationManager_GetChannel_Handler,
		},
		{
			MethodName: "EditChannelStatus",
			Handler:    _NotificationManager_EditChannelStatus_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _NotificationManager_DeleteChannel_Handler,
		},
		{
			MethodName: "GetBotEventConfigs",
			Handler:    _NotificationManager_GetBotEventConfigs_Handler,
		},
		{
			MethodName: "GetBotEventDetails",
			Handler:    _NotificationManager_GetBotEventDetails_Handler,
		},
		{
			MethodName: "EditBotEventDetails",
			Handler:    _NotificationManager_EditBotEventDetails_Handler,
		},
		{
			MethodName: "EditBotEventStatus",
			Handler:    _NotificationManager_EditBotEventStatus_Handler,
		},
		{
			MethodName: "UninstallIntegration",
			Handler:    _NotificationManager_UninstallIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/notification-manager/notification.proto",
}

// InternalClient is the client API for Internal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalClient interface {
	IntSendNotification(ctx context.Context, in *NotificationReq, opts ...grpc.CallOption) (*IntSendNotificationReply, error)
	IntAddAccountConfig(ctx context.Context, in *UserMetaReq, opts ...grpc.CallOption) (*IntAddAccountConfigReply, error)
	IntAddUserConfig(ctx context.Context, in *UserMetaReq, opts ...grpc.CallOption) (*IntAddUserConfigReply, error)
	IntDeleteAccountConfig(ctx context.Context, in *IntDeleteAccountConfigReq, opts ...grpc.CallOption) (*IntDeleteAccountConfigReply, error)
}

type internalClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalClient(cc grpc.ClientConnInterface) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) IntSendNotification(ctx context.Context, in *NotificationReq, opts ...grpc.CallOption) (*IntSendNotificationReply, error) {
	out := new(IntSendNotificationReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.Internal/IntSendNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) IntAddAccountConfig(ctx context.Context, in *UserMetaReq, opts ...grpc.CallOption) (*IntAddAccountConfigReply, error) {
	out := new(IntAddAccountConfigReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.Internal/IntAddAccountConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) IntAddUserConfig(ctx context.Context, in *UserMetaReq, opts ...grpc.CallOption) (*IntAddUserConfigReply, error) {
	out := new(IntAddUserConfigReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.Internal/IntAddUserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) IntDeleteAccountConfig(ctx context.Context, in *IntDeleteAccountConfigReq, opts ...grpc.CallOption) (*IntDeleteAccountConfigReply, error) {
	out := new(IntDeleteAccountConfigReply)
	err := c.cc.Invoke(ctx, "/notificationmanager.Internal/IntDeleteAccountConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalServer is the server API for Internal service.
// All implementations must embed UnimplementedInternalServer
// for forward compatibility
type InternalServer interface {
	IntSendNotification(context.Context, *NotificationReq) (*IntSendNotificationReply, error)
	IntAddAccountConfig(context.Context, *UserMetaReq) (*IntAddAccountConfigReply, error)
	IntAddUserConfig(context.Context, *UserMetaReq) (*IntAddUserConfigReply, error)
	IntDeleteAccountConfig(context.Context, *IntDeleteAccountConfigReq) (*IntDeleteAccountConfigReply, error)
	mustEmbedUnimplementedInternalServer()
}

// UnimplementedInternalServer must be embedded to have forward compatible implementations.
type UnimplementedInternalServer struct {
}

func (UnimplementedInternalServer) IntSendNotification(context.Context, *NotificationReq) (*IntSendNotificationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntSendNotification not implemented")
}
func (UnimplementedInternalServer) IntAddAccountConfig(context.Context, *UserMetaReq) (*IntAddAccountConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntAddAccountConfig not implemented")
}
func (UnimplementedInternalServer) IntAddUserConfig(context.Context, *UserMetaReq) (*IntAddUserConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntAddUserConfig not implemented")
}
func (UnimplementedInternalServer) IntDeleteAccountConfig(context.Context, *IntDeleteAccountConfigReq) (*IntDeleteAccountConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntDeleteAccountConfig not implemented")
}
func (UnimplementedInternalServer) mustEmbedUnimplementedInternalServer() {}

// UnsafeInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalServer will
// result in compilation errors.
type UnsafeInternalServer interface {
	mustEmbedUnimplementedInternalServer()
}

func RegisterInternalServer(s grpc.ServiceRegistrar, srv InternalServer) {
	s.RegisterService(&Internal_ServiceDesc, srv)
}

func _Internal_IntSendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).IntSendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.Internal/IntSendNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).IntSendNotification(ctx, req.(*NotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_IntAddAccountConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMetaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).IntAddAccountConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.Internal/IntAddAccountConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).IntAddAccountConfig(ctx, req.(*UserMetaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_IntAddUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMetaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).IntAddUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.Internal/IntAddUserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).IntAddUserConfig(ctx, req.(*UserMetaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_IntDeleteAccountConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntDeleteAccountConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).IntDeleteAccountConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmanager.Internal/IntDeleteAccountConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).IntDeleteAccountConfig(ctx, req.(*IntDeleteAccountConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Internal_ServiceDesc is the grpc.ServiceDesc for Internal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Internal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notificationmanager.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntSendNotification",
			Handler:    _Internal_IntSendNotification_Handler,
		},
		{
			MethodName: "IntAddAccountConfig",
			Handler:    _Internal_IntAddAccountConfig_Handler,
		},
		{
			MethodName: "IntAddUserConfig",
			Handler:    _Internal_IntAddUserConfig_Handler,
		},
		{
			MethodName: "IntDeleteAccountConfig",
			Handler:    _Internal_IntDeleteAccountConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/notification-manager/notification.proto",
}
